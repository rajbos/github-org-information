on: push

env:
  org: devops-actions

jobs:
  get-repo-info:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/github-script@v6
      id: get-repo-info
      with:
        script: |
          // load all repos from the org, with pagination
          const repos = await github.paginate(github.rest.repos.listForOrg, {org: process.env.org})
          console.log(`Found ${repos.length} repos`)

          function updateTopic(newTopic, repo) {
            newTopic.count++
            switch (repo.visibility) {
              case 'internal':
                newTopic.internal++
                break
              case 'private':
                newTopic.private++
                break
              case `public`:
                newTopic.public++
                break
              default:
                console.log(`Unknown visibility: ${repo.visibility}`)
                break
            }
            
            return newTopic
          }

          // loop over the repos and print their topics from the topics array property
          // array to hold the name and count
          var foundTopics = []
          var reposWithOutTopics = 0
          for (const repo of repos) {
            const topics = repo.topics

            if (topics && topics.length > 0) {
              console.log(`${repo.name}: ${topics.join(', ')}`)

              // loop over the topics and add them to the array
              for (const topic of topics) {
                // check if the topic is already in the array
                const index = foundTopics.findIndex(t => t.name === topic)
                if (index === -1) {
                  // if not, add it
                  var newTopic = {name: topic, count: 0, internal:0, private: 0, public: 0}
                  newTopic = updateTopic(newTopic, repo)
                  foundTopics.push(newTopic)
                }
                else {
                  // if it is, increment the counts
                  updateTopic(foundTopics[index], repo)                  
                }
              }

            }
            else {
              console.log(`${repo.name}: No topics`)
              reposWithOutTopics++
            }
          }

          // sort the array by count
          const sorted = foundTopics.sort((a, b) => b.count - a.count)
          // show the counts
          console.log(sorted)
          console.log(`----------------------------`)
          console.log(`Repos without topics: ${reposWithOutTopics}`)

          // write the info to a file
          const fs = require('fs')
          fs.writeFileSync('topics.json', JSON.stringify(sorted, null, 2))

          // and store the file in the file GITHUB_OUTPUT env var
          core.setOutput('summary-file', 'topics.json')

    - name: Show information in the GITHUB_STEP_SUMMARY
      uses: actions/github-script@v6
      env:
        summaryFile: ${{ steps.get-repo-info.outputs.summary-file }}
      with: 
        script: |
          const fs = require('fs')
          const summary = fs.readFileSync(process.env.summaryFile, 'utf8')

          console.log(summary)
          
          // make the heading array for the core.summary method  [{data: 'Topic', header: true}, {data: 'count', header: true}, {data: 'public', header: true},{data: 'internal', header: true},{data: 'private', header: true}],
          const headingArray = [{data: 'Topic', header: true}, {data: 'count', header: true}, {data: 'public', header: true},{data: 'internal', header: true},{data: 'private', header: true}]
        
          // convert the summary array into an array that can be passed into the core.summary method
          const summaryArray = JSON.parse(summary).map(t => [t.name, t.count, t.public, t.internal, t.private])

          console.log(`summaryArray` + JSON.stringify(summaryArray))

          // join the two arrays
          const tableArray = [headingArray, ...summaryArray]

          console.log(`tableArray:`)
          console.log(JSON.stringify(tableArray))

          await core.summary
                    .addHeading('Topics used on repos in the [${process.env.org}] organization')
                    .addTable(tableArray)
                    .write()

          await core.summary
                    .addHeading('Example')
                    .addTable([
                                [{data: 'Topic', header: true}, {data: 'count', header: true}, {data: 'public', header: true},{data: 'internal', header: true},{data: 'private', header: true}],
                                ['foo.js' , 'Hmp', 1,2,3,4],
                                ['bar.js' , 'Hmp', 1,2,3,4],
                                ['test.js', 'Hmp', 1,2,3,4]
                              ])
                    .write()